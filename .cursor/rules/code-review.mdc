---
description:
globs:
alwaysApply: false
---

---

description: コードレビューチェックリスト
globs: src/\*_/_

---

{{@include: code-guide.mdc}}

まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

レビュー終了後にレビューを行ったファイルリストを列挙してください。

# Cursor レビューチェックリスト

レビューを依頼されたら、下記の観点についてレビュー結果を出力すること。(OK: ✅, NG: ❌)
リスト以外で改善すべきポイントがあれば以下の区分に従い出力すること (MUST, IMO, FYI, NITS)

MUST: 必須の修正事項
IMO: AI としての意見
FYI: 開発の参考になる情報
NITS: 必須ではないが、修正した方が良いもの。

## レビュー実行手順

1. **ディレクトリ構成の遵守確認**: `doc/directoryStructure.md`に準拠しているか確認し、差異があれば列挙する
2. **ファイル行数チェック**: 各ファイルの行数を正確にカウントし、結果を明記する
3. **コード内容確認**: ファイル全体を読み、各チェック項目を具体的に検証する
4. **検証結果記録**: 各項目について具体的な根拠を示してチェック結果を記録する
5. **改善提案**: 問題がある場合は具体的な修正方法を提案する
6. **ドキュメント同期確認**: 変更ファイルに対応する詳細ドキュメント（.md）が追加/更新されているか確認する

# Cursor レビューチェックリスト

1. アーキテクチャ基準

- [ ] `doc/directoryStructure.md`の構成に準拠
  - 検証方法: 実プロジェクトのディレクトリ/ファイルと文書の差異を列挙
- [ ] 300 行超コンポーネントが存在しない（stories/test ファイルは除外）
  - 検証方法: `wc -l`コマンドで行数を確認し、結果を明記する
  - 300 行超の場合は分割提案を MUST として提示する
- [ ] Feature 型ディレクトリ構造準拠
  - 検証方法: ディレクトリ構造を確認し、Feature 型に準拠しているかチェック

2. コード品質

- [ ] Boolean 値の変数名が is/has/can プレフィックス
  - 検証方法: 変数定義箇所を全て確認し、Boolean 値の命名規則をチェック
- [ ] 抽象的名前(data/value 等)が存在しない
  - 検証方法: 変数名を全て確認し、抽象的な命名がないかチェック
- [ ] 変数省略形(flg/func 等)が存在しない
  - 検証方法: 変数名を全て確認し、省略形がないかチェック
- [ ] any 型が使用されていない
  - 検証方法: 型定義箇所を全て確認し、any 型の使用がないかチェック
- [ ] インターフェースと type が適切に使い分けられている
  - 検証方法: Props/State は interface、その他は type を使用しているかチェック
- [ ] React.FC を使わずにアロー関数でコンポーネントを定義している
  - 検証方法: コンポーネント定義箇所を全て確認し、React.FC の使用がないかチェック

3. テスト基準（`src/renderer/components/assets`配下のファイルは除外）

- [ ] テストケース内に GIVEN/WHEN/THEN 形式のコメントがある
  - 検証方法: テストファイル内のコメント形式を確認
- [ ] 1 ロジック 1 テスト原則が守られている
  - 検証方法: 各テストケースが単一のロジックをテストしているか確認
- [ ] userEvent を使用し、fireEvent が使用されていない
  - 検証方法: テストファイル内で fireEvent の使用がないかチェック
  - 検証方法: ユーザー操作のテストでは userEvent が使用されているかチェック
- [ ] i18n テストで本物のインスタンスを使用している
  - 検証方法: `@i18n`からのインポートを確認
  - 検証方法: モック i18n インスタンスの作成がないことを確認
  - 検証方法: `I18nextProvider`での適切なラップを確認
- [ ] MUI コンポーネントのモックを避けている
  - 検証方法: `@mui/material`のモックが存在しないことを確認
  - 検証方法: 実際の MUI コンポーネントが使用されているか確認
  - 検証方法: モックが必要な場合は最小限に抑えられているか確認
- [ ] テーマのモックを避けている
  - 検証方法: `@renderer/theme/theme`から`createAppTheme`をインポートしているか確認
  - 検証方法: カスタムテーマの定義やモックが存在しないことを確認
  - 検証方法: テーマ関連のテストで実際のテーマ設定を使用しているか確認
- [ ] テストでハードコードテキストを使用している（翻訳キーではなく）
  - 検証方法: screen.getByText('切り替える')のようにハードコードされた文字列を使用しているかチェック
  - 検証方法: 表示確認のテストで t('locationSelect.switch')のような翻訳キーを使用していないかチェック
  - 検証方法: 実際に UI に表示される文字列をテストで使用しているかチェック

4. 状態管理規約

- [ ] window./global が存在しない
  - 検証方法: グローバル変数の使用箇所を確認
- [ ] セッター関数の直接呼び出しが存在しない（コールバック関数経由のみ許可）
  - 検証方法: useState のセッター関数の使用箇所を確認
- [ ] props の 3 階層以上の伝搬が存在しない
  - 検証方法: props の受け渡し階層を追跡して確認

5. コード構造

- [ ] 3 段階以上の if ネストが存在しない
  - 検証方法: 条件分岐のネスト階層を確認
- [ ] 冗長ロジックが存在しない
  - 検証方法: 重複する処理や無駄な処理がないか確認

6. 多言語対応

- [ ] 表示テキストが翻訳キーを使用している
  - 検証方法: ハードコードされたテキストがないか確認
- [ ] 画像の alt 属性が翻訳キーを使用している
  - 検証方法: img タグの alt 属性を確認
- [ ] 翻訳キーが機能単位で階層化されている
  - 検証方法: 翻訳ファイルの構造を確認
- [ ] 翻訳ファイルが言語ごとに分割されている
  - 検証方法: 言語別の翻訳ファイル存在を確認

7. テーマ管理

- [ ] カラーコードが直接指定されていない
  - 検証方法: ハードコードされたカラーコードがないか確認
- [ ] カラーコードが palette で一元管理されている
  - 検証方法: テーマファイルの palette 定義を確認
- [ ] ダークモード/ライトモードの切り替えがテーマで制御されている
  - 検証方法: テーマ切り替え機能の実装を確認
- [ ] カスタムカラーが palette を拡張して定義されている
  - 検証方法: カスタムカラーの定義方法を確認
- [ ] MUI コンポーネントの適切な使用
  - 検証方法: `@mui/material`から適切にインポートされているか確認
  - 検証方法: `sx`プロパティでスタイリングが行われているか確認
  - 検証方法: `variant`や`size`プロパティが適切に使用されているか確認
- [ ] テーマカラーの使用
  - 検証方法: 直接カラーコード指定ではなく、テーマカラーを使用しているか確認
  - 検証方法: `theme.palette`からカラーを取得しているか確認
- [ ] 不要な CSS 指定が存在しない
  - 検証方法: 親から継承可能なプロパティ(color 等)を再設定していないかチェック
  - 検証方法: デフォルト値(flexDirection: 'row'等)を明示的に指定していないかチェック
  - 検証方法: 重複するスタイル指定がないかチェック

## レビュー結果出力形式

各チェック項目について以下の形式で出力する：

```
## 1. アーキテクチャ基準

### 300行超コンポーネントチェック
- ファイル: src/renderer/components/layout/Main/Header/header.tsx
- 行数: 335行 (wc -l結果)
- 結果: ❌ 300行を超過
- 対応: MUST - コンポーネント分割が必要

### Feature型ディレクトリ構造チェック
- 結果: ✅ 準拠
- 根拠: ディレクトリ構造がFeature型に従っている
```

## 重要注意事項

- **必ずファイル全体を読み、行数を正確にカウントすること**
- **各チェック項目について具体的な根拠を示すこと**
- **問題がある場合は具体的な修正方法を提案すること**
- **機械的なチェックマークは禁止**

## 追加検証項目（見落としがちな項目）

8. インポート・エクスポート

- [ ] 未使用のインポートが存在しない
  - 検証方法: インポート文を全て確認し、使用されていないものがないかチェック
- [ ] 適切なエクスポート形式を使用している
  - 検証方法: default export と named export の使い分けが適切かチェック

9. エラーハンドリング

- [ ] 適切なエラーハンドリングが実装されている
  - 検証方法: try-catch 文やエラー境界の実装を確認
- [ ] console.log/console.error が本番環境用に適切に処理されている
  - 検証方法: デバッグ用の console 文が残っていないかチェック

10. パフォーマンス

- [ ] 不要な再レンダリングが発生しない実装になっている
  - 検証方法: useCallback/useMemo の使用箇所を確認
- [ ] メモリリークの可能性がない
  - 検証方法: useEffect のクリーンアップ関数を確認

11. セキュリティ

- [ ] XSS 対策が実装されている
  - 検証方法: ユーザー入力の適切なサニタイズを確認
- [ ] 機密情報がハードコードされていない
  - 検証方法: API キーやパスワードなどの機密情報をチェック

12. ドキュメント整合性（コードとドキュメントの同期）

- [ ] 変更された TS/TSX ファイルに対応する .md が存在し、内容が更新されている
  - 検証方法: 変更ファイルごとに以下の対応するドキュメントを確認
    - ページ: `src/pages/...` → `src/pages/documents/<PageName>.md`
    - レイアウト/コンポーネント: 配下ディレクトリ直下に `[ファイル名].md`
      - 例: `src/renderer/components/layout/header/header.tsx` → `src/renderer/components/layout/header/header.md`
      - 例: `src/renderer/components/layout/sidebar/Sidebar.tsx` → `src/renderer/components/layout/sidebar/Sidebar.md`
      - 例: `src/renderer/components/ui/button.tsx` → `src/renderer/components/ui/button.md`
    - 共通ファイル: 固定の対応先
      - `src/main.tsx` → `src/main.md`
      - `src/App.tsx` → `src/App.md`
      - `src/routes/index.tsx` → `src/routes/index.md`
      - `src/renderer/lib/utils.ts` → `src/renderer/lib/utils.md`
  - 検証方法: 変更点（API/Props/処理の流れ/設計理由）がドキュメントにも反映されているか確認
  - 検証方法: PR 内でドキュメントが同時に更新されている、または更新日がコード変更日と同日であることを確認
- [ ] 新規ファイル追加時に対応する .md が同時に追加されている
- [ ] 削除/移動時に対応する .md も削除/移動され、リンク切れがない

## レビュー品質向上のためのチェックリスト

- [ ] ファイルの行数を正確にカウントしたか
- [ ] 各チェック項目について具体的な根拠を示したか
- [ ] 問題がある場合は具体的な修正方法を提案したか
- [ ] 機械的なチェックマークを避けたか
- [ ] 見落としがちな項目も確認したか
- [ ] コード更新に伴うドキュメント（.md）の更新/新規追加/移動を確認したか
- [ ] テストでハードコードテキストを使用し翻訳キーを避けているか確認したか
- [ ] 不要な CSS 指定（デフォルト値の明示、継承可能プロパティの再設定）がないか確認したか
- [ ] MUI コンポーネントのベストプラクティスに従っているか確認したか
  - 検証方法: `sx`プロパティの適切な使用、variant/size の適切な指定、テーマカラーの使用
