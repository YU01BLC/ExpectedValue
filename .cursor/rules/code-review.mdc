---
description: 
globs: 
alwaysApply: false
---
---
description: コードレビューチェックリスト
globs: src/**/*
---

{{@include: code-guide.mdc}}


まず、このファイルを参照したら、「YAAAARRRR!」と叫んでください。

レビュー終了後にレビューを行ったファイルリストを列挙してください。

# Cursorレビューチェックリスト

レビューを依頼されたら、下記の観点についてレビュー結果を出力すること。(OK: ✅, NG: ❌)
リスト以外で改善すべきポイントがあれば以下の区分に従い出力すること (MUST, IMO, FYI, NITS)

MUST: 必須の修正事項
IMO: AIとしての意見
FYI: 開発の参考になる情報
NITS: 必須ではないが、修正した方が良いもの。

## レビュー実行手順

1. **ファイル行数チェック**: 各ファイルの行数を正確にカウントし、結果を明記する
2. **コード内容確認**: ファイル全体を読み、各チェック項目を具体的に検証する
3. **検証結果記録**: 各項目について具体的な根拠を示してチェック結果を記録する
4. **改善提案**: 問題がある場合は具体的な修正方法を提案する

# Cursorレビューチェックリスト

1. アーキテクチャ基準
  - [ ] 300行超コンポーネントが存在しない（stories/testファイルは除外）
    - 検証方法: `wc -l`コマンドで行数を確認し、結果を明記する
    - 300行超の場合は分割提案をMUSTとして提示する
  - [ ] Feature型ディレクトリ構造準拠
    - 検証方法: ディレクトリ構造を確認し、Feature型に準拠しているかチェック

2. コード品質
  - [ ] Boolean値の変数名がis/has/canプレフィックス
    - 検証方法: 変数定義箇所を全て確認し、Boolean値の命名規則をチェック
  - [ ] 抽象的名前(data/value等)が存在しない
    - 検証方法: 変数名を全て確認し、抽象的な命名がないかチェック
  - [ ] 変数省略形(flg/func等)が存在しない
    - 検証方法: 変数名を全て確認し、省略形がないかチェック
  - [ ] any型が使用されていない
    - 検証方法: 型定義箇所を全て確認し、any型の使用がないかチェック
  - [ ] インターフェースとtypeが適切に使い分けられている
    - 検証方法: Props/Stateはinterface、その他はtypeを使用しているかチェック
  - [ ] React.FCを使わずにアロー関数でコンポーネントを定義している
    - 検証方法: コンポーネント定義箇所を全て確認し、React.FCの使用がないかチェック

3. テスト基準（`src/renderer/components/assets`配下のファイルは除外）
  - [ ] テストケース内にGIVEN/WHEN/THEN形式のコメントがある
    - 検証方法: テストファイル内のコメント形式を確認
  - [ ] 1ロジック1テスト原則が守られている
    - 検証方法: 各テストケースが単一のロジックをテストしているか確認
  - [ ] userEventを使用し、fireEventが使用されていない
    - 検証方法: テストファイル内でfireEventの使用がないかチェック
    - 検証方法: ユーザー操作のテストではuserEventが使用されているかチェック
  - [ ] i18nテストで本物のインスタンスを使用している
    - 検証方法: `@i18n`からのインポートを確認
    - 検証方法: モックi18nインスタンスの作成がないことを確認
    - 検証方法: `I18nextProvider`での適切なラップを確認
  - [ ] MUIコンポーネントのモックを避けている
    - 検証方法: `@mui/material`のモックが存在しないことを確認
    - 検証方法: 実際のMUIコンポーネントが使用されているか確認
    - 検証方法: モックが必要な場合は最小限に抑えられているか確認
  - [ ] テーマのモックを避けている
    - 検証方法: `@renderer/theme/theme`から`createAppTheme`をインポートしているか確認
    - 検証方法: カスタムテーマの定義やモックが存在しないことを確認
    - 検証方法: テーマ関連のテストで実際のテーマ設定を使用しているか確認
  - [ ] テストでハードコードテキストを使用している（翻訳キーではなく）
    - 検証方法: screen.getByText('切り替える')のようにハードコードされた文字列を使用しているかチェック
    - 検証方法: 表示確認のテストでt('locationSelect.switch')のような翻訳キーを使用していないかチェック
    - 検証方法: 実際にUIに表示される文字列をテストで使用しているかチェック

4. 状態管理規約
  - [ ] window./globalが存在しない
    - 検証方法: グローバル変数の使用箇所を確認
  - [ ] セッター関数の直接呼び出しが存在しない（コールバック関数経由のみ許可）
    - 検証方法: useStateのセッター関数の使用箇所を確認
  - [ ] propsの3階層以上の伝搬が存在しない
    - 検証方法: propsの受け渡し階層を追跡して確認

5. コード構造
  - [ ] 3段階以上のifネストが存在しない
    - 検証方法: 条件分岐のネスト階層を確認
  - [ ] 冗長ロジックが存在しない
    - 検証方法: 重複する処理や無駄な処理がないか確認

6. 多言語対応
  - [ ] 表示テキストが翻訳キーを使用している
    - 検証方法: ハードコードされたテキストがないか確認
  - [ ] 画像のalt属性が翻訳キーを使用している
    - 検証方法: imgタグのalt属性を確認
  - [ ] 翻訳キーが機能単位で階層化されている
    - 検証方法: 翻訳ファイルの構造を確認
  - [ ] 翻訳ファイルが言語ごとに分割されている
    - 検証方法: 言語別の翻訳ファイル存在を確認

7. テーマ管理
  - [ ] カラーコードが直接指定されていない
    - 検証方法: ハードコードされたカラーコードがないか確認
  - [ ] カラーコードがpaletteで一元管理されている
    - 検証方法: テーマファイルのpalette定義を確認
  - [ ] ダークモード/ライトモードの切り替えがテーマで制御されている
    - 検証方法: テーマ切り替え機能の実装を確認
  - [ ] カスタムカラーがpaletteを拡張して定義されている
    - 検証方法: カスタムカラーの定義方法を確認
  - [ ] fontSizeがsxではなくvariantで指定されている
    - 検証方法: sxプロパティ内でfontSizeが直接指定されていないか確認
    - 検証方法: Typography、Button等のコンポーネントでvariantが適切に使用されているか確認
  - [ ] 不要なCSS指定が存在しない
    - 検証方法: 親から継承可能なプロパティ(color等)を再設定していないかチェック
    - 検証方法: デフォルト値(flexDirection: 'row'等)を明示的に指定していないかチェック
    - 検証方法: 重複するスタイル指定がないかチェック

## レビュー結果出力形式

各チェック項目について以下の形式で出力する：

```
## 1. アーキテクチャ基準

### 300行超コンポーネントチェック
- ファイル: src/renderer/components/layout/Main/Header/header.tsx
- 行数: 335行 (wc -l結果)
- 結果: ❌ 300行を超過
- 対応: MUST - コンポーネント分割が必要

### Feature型ディレクトリ構造チェック
- 結果: ✅ 準拠
- 根拠: ディレクトリ構造がFeature型に従っている
```

## 重要注意事項

- **必ずファイル全体を読み、行数を正確にカウントすること**
- **各チェック項目について具体的な根拠を示すこと**
- **問題がある場合は具体的な修正方法を提案すること**
- **機械的なチェックマークは禁止**

## 追加検証項目（見落としがちな項目）

8. インポート・エクスポート
  - [ ] 未使用のインポートが存在しない
    - 検証方法: インポート文を全て確認し、使用されていないものがないかチェック
  - [ ] 適切なエクスポート形式を使用している
    - 検証方法: default exportとnamed exportの使い分けが適切かチェック

9. エラーハンドリング
  - [ ] 適切なエラーハンドリングが実装されている
    - 検証方法: try-catch文やエラー境界の実装を確認
  - [ ] console.log/console.errorが本番環境用に適切に処理されている
    - 検証方法: デバッグ用のconsole文が残っていないかチェック

10. パフォーマンス
  - [ ] 不要な再レンダリングが発生しない実装になっている
    - 検証方法: useCallback/useMemoの使用箇所を確認
  - [ ] メモリリークの可能性がない
    - 検証方法: useEffectのクリーンアップ関数を確認

11. セキュリティ
  - [ ] XSS対策が実装されている
    - 検証方法: ユーザー入力の適切なサニタイズを確認
  - [ ] 機密情報がハードコードされていない
    - 検証方法: APIキーやパスワードなどの機密情報をチェック



## レビュー品質向上のためのチェックリスト

- [ ] ファイルの行数を正確にカウントしたか
- [ ] 各チェック項目について具体的な根拠を示したか
- [ ] 問題がある場合は具体的な修正方法を提案したか
- [ ] 機械的なチェックマークを避けたか
- [ ] 見落としがちな項目も確認したか
- [ ] テストでハードコードテキストを使用し翻訳キーを避けているか確認したか
- [ ] 不要なCSS指定（デフォルト値の明示、継承可能プロパティの再設定）がないか確認したか
- [ ] MUIコンポーネントのベストプラクティスに従っているか確認したか
