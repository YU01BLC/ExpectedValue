import { render, screen } from '@testing-library/react';
import { ThemeProvider } from '@mui/material/styles';
import { createAppTheme } from '@renderer/theme/theme';
import { SearchArea, type SearchFilters } from '../SearchArea';
import { describe, it, expect, vi } from 'vitest';
import userEvent from '@testing-library/user-event';

const theme = createAppTheme();

const renderWithTheme = (component: React.ReactElement) => {
  return render(<ThemeProvider theme={theme}>{component}</ThemeProvider>);
};

describe('SearchArea', () => {
  it('Âü∫Êú¨ÁöÑ„Å™Ê§úÁ¥¢„Ç®„É™„Ç¢„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', () => {
    // GIVEN
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    // THEN
    expect(screen.getByText('üîç „É¨„Éº„ÇπÊ§úÁ¥¢')).toBeInTheDocument();
    expect(screen.getAllByText('ÈñãÂÇ¨Êó•')).toHaveLength(2); // „É©„Éô„É´„Å®DatePickerÂÜÖ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà
    expect(screen.getAllByText('‰ºöÂ†¥')).toHaveLength(2); // „É©„Éô„É´„Å®SelectÂÜÖ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà
    expect(screen.getAllByText('„É¨„Éº„ÇπÁï™Âè∑')).toHaveLength(2); // „É©„Éô„É´„Å®SelectÂÜÖ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà
    expect(screen.getByText('Ê§úÁ¥¢')).toBeInTheDocument();
  });

  it('ÂàùÊúüÂÄ§„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã„Åì„Å®', () => {
    // GIVEN
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();
    const initialFilters: Partial<SearchFilters> = {
      venue: 'hanshin',
      raceNumber: 5,
    };

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
        initialFilters={initialFilters}
      />
    );

    // THEN
    expect(screen.getByText('Èò™Á•û')).toBeInTheDocument();
    expect(screen.getByText('5R - 2Âãù„ÇØ„É©„Çπ')).toBeInTheDocument();
  });

  it('‰ºöÂ†¥ÈÅ∏Êäû„ÅåÂãï‰Ωú„Åô„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    // THEN
    const comboboxes = screen.getAllByRole('combobox');
    const venueSelect = comboboxes[0]; // ÊúÄÂàù„ÅÆcombobox„Åå‰ºöÂ†¥
    await user.click(venueSelect);

    expect(screen.getByText('‰∏≠Â±±')).toBeInTheDocument();
    expect(screen.getByText('Èò™Á•û')).toBeInTheDocument();
    expect(screen.getByText('‰∫¨ÈÉΩ')).toBeInTheDocument();
  });

  it('„É¨„Éº„ÇπÁï™Âè∑ÈÅ∏Êäû„ÅåÂãï‰Ωú„Åô„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    // THEN
    const comboboxes = screen.getAllByRole('combobox');
    const raceSelect = comboboxes[1]; // 2Áï™ÁõÆ„ÅÆcombobox„Åå„É¨„Éº„ÇπÁï™Âè∑
    await user.click(raceSelect);

    expect(screen.getAllByText('1R - 2Ê≠≥Êú™ÂãùÂà©')).toHaveLength(2); // Select„Å®MenuItem„Åß2ÂõûÂá∫Áèæ
    expect(screen.getByText('2R - 3Ê≠≥Êú™ÂãùÂà©')).toBeInTheDocument();
    expect(screen.getByText('3R - 4Ê≠≥‰ª•‰∏äÊú™ÂãùÂà©')).toBeInTheDocument();
  });

  it('Ê§úÁ¥¢„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    const searchButton = screen.getByRole('button', { name: 'Ê§úÁ¥¢' });
    await user.click(searchButton);

    // THEN
    expect(mockOnSearchClick).toHaveBeenCalledTimes(1);
  });

  it('‰ºöÂ†¥Â§âÊõ¥ÊôÇ„Å´onFiltersChange„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    const comboboxes = screen.getAllByRole('combobox');
    const venueSelect = comboboxes[0];
    await user.click(venueSelect);
    await user.click(screen.getByText('‰∏≠Â±±'));

    // THEN
    expect(mockOnFiltersChange).toHaveBeenCalledWith(
      expect.objectContaining({
        venue: 'nakayama',
        raceNumber: 1,
      })
    );
  });

  it('„É¨„Éº„ÇπÁï™Âè∑Â§âÊõ¥ÊôÇ„Å´onFiltersChange„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    const comboboxes = screen.getAllByRole('combobox');
    const raceSelect = comboboxes[1];
    await user.click(raceSelect);
    await user.click(screen.getByText('2R - 3Ê≠≥Êú™ÂãùÂà©'));

    // THEN
    expect(mockOnFiltersChange).toHaveBeenCalledWith(
      expect.objectContaining({
        venue: 'tokyo',
        raceNumber: 2,
      })
    );
  });

  it('Êó•‰ªòÂ§âÊõ¥ÊôÇ„Å´onFiltersChange„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®', async () => {
    // GIVEN
    const user = userEvent.setup();
    const mockOnFiltersChange = vi.fn();
    const mockOnSearchClick = vi.fn();

    // WHEN
    renderWithTheme(
      <SearchArea
        onFiltersChange={mockOnFiltersChange}
        onSearchClick={mockOnSearchClick}
      />
    );

    // DatePicker„ÅÆÂπ¥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Â§âÊõ¥
    const yearElement = screen.getByRole('spinbutton', { name: 'Year' });
    await user.click(yearElement);
    await user.clear(yearElement);
    await user.type(yearElement, '2024');

    // THEN
    expect(mockOnFiltersChange).toHaveBeenCalledWith(
      expect.objectContaining({
        venue: 'tokyo',
        raceNumber: 1,
        date: expect.any(Object),
      })
    );
  });
});
